from typing import Any, Dict
import numpy as np
import pybullet as p
from panda_gym.envs.core import Task
from panda_gym.utils import distance

class Reach(Task):
    def __init__(
        self,
        sim,
        reward_type="sparse",
        distance_threshold=0.05,
        goal_xy_range=0.3,
    ) -> None:
        super().__init__(sim)
        self.reward_type = reward_type
        self.distance_threshold = distance_threshold
        self.goal_range_low = np.array([-goal_xy_range / 2, -goal_xy_range / 2, 0])
        self.goal_range_high = np.array([goal_xy_range / 2, goal_xy_range / 2, 0])
        self.goal_visible = True
        with self.sim.no_rendering():
            self._create_scene()

    def _create_scene(self) -> None:
        self.sim.create_plane(z_offset=-0.4)
        self.sim.create_table(length=1.1, width=0.7, height=0.4, x_offset=-0.3)
        self.target_uid = self.sim.create_box(
            body_name="target",
            half_extents=np.array([0.02, 0.02, 0.02]),
            mass=0.0,
            ghost=True,
            position=np.array([0.0, 0.0, 0.02]),
            rgba_color=np.array([0.1, 0.1, 0.9, 0.3]),
        )
        # print(f"Debug: Created target with UID {self.target_uid}")

    def get_obs(self) -> np.ndarray:
        ee_position = np.array(self.sim.get_end_effector_position())
        ee_velocity = np.array(self.sim.get_end_effector_velocity())
        observation = np.concatenate([ee_position, ee_velocity])
        return observation

    def get_achieved_goal(self) -> np.ndarray:
        ee_position = np.array(self.sim.get_end_effector_position())
        return ee_position

    def reset(self) -> None:
        self.goal = self._sample_goal()
        self.sim.set_base_pose("target", self.goal, np.array([0.0, 0.0, 0.0, 1.0]))
        self.set_goal_visibility(self.goal_visible)

    def _sample_goal(self) -> np.ndarray:
        goal = np.array([0.0, 0.0, 0.02])
        noise = self.np_random.uniform(self.goal_range_low, self.goal_range_high)
        goal += noise
        return goal

    def is_success(self, achieved_goal: np.ndarray, desired_goal: np.ndarray) -> np.ndarray:
        d = distance(achieved_goal, desired_goal)
        return np.array(d < self.distance_threshold, dtype=bool)

    def compute_reward(self, achieved_goal, desired_goal, info: Dict[str, Any]) -> np.ndarray:
        d = distance(achieved_goal, desired_goal)
        if self.reward_type == "sparse":
            return -np.array(d > self.distance_threshold, dtype=np.float32)
        else:
            return -d.astype(np.float32)

    def set_goal_visibility(self, visibility: bool) -> None:
        self.goal_visible = visibility
        alpha = 0.3 if visibility else 0.0
        if self.target_uid is not None:
            p.changeVisualShape(self.target_uid, -1, rgbaColor=[0.1, 0.1, 0.9, alpha])
            # print(f"Debug: Set goal visibility to {visibility} with alpha {alpha}")
        else:
            print("Error: target_uid is None.")
